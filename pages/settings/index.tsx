import FCWithAuth from "@/types/FCWithAuth";
import NewCampaign from "@/pages/campaigns/new";
import {
  Box,
  Button,
  FormControl,
  FormErrorMessage,
  FormHelperText,
  FormLabel,
  Heading,
  HStack,
  Input,
  NumberDecrementStepper,
  NumberIncrementStepper,
  NumberInput,
  NumberInputField,
  NumberInputStepper,
  Progress,
  Spinner,
  Switch,
  Text,
  VStack,
} from "@chakra-ui/react";
import CampaignForm from "@/components/CampaignForm";
import { Link } from "@chakra-ui/next-js";
import React, { ReactNode, useEffect, useState } from "react";
import SliderThumbWithTooltip from "@/components/SliderThumbWithTooltip";
import useSettings from "@/hooks/useSettings";
import { ErrorAlert, ErrorRow, NoDataRow } from "@/components/genericMessages";
import { SettingType } from "@/types/my-types";
import { CreatableSelect as Select } from "chakra-react-select";

const sponsoredOptions: { value: string; label: string }[] = [
  {
    value: "This paragraph was generated by BrandWeaver.ai.",
    label: "This paragraph was generated by BrandWeaver.ai.",
  },
  {
    value: "This paragraph was generated by a large language model.",
    label: "This paragraph was generated by a large language model.",
  },
  {
    value: "This paragraph was generated by AI.",
    label: "This paragraph was generated by AI.",
  },
  {
    value: "This paragraph was AI-generated.",
    label: "This paragraph was AI-generated.",
  },
  {
    value: "This paragraph is AI-generated advertising.",
    label: "This paragraph is AI-generated advertising.",
  },
  {
    value: "This paragraph is an AI-generated ad.",
    label: "This paragraph is an AI-generated ad.",
  },
  {
    value: "This paragraph is sponsored.",
    label: "This paragraph is sponsored.",
  },
  {
    value: "#SponsoredParagraph",
    label: "#SponsoredParagraph",
  },
  {
    value: "#AdvertisingParagraph",
    label: "#AdvertisingParagraph",
  },
  {
    value: "#AdParagraph",
    label: "#AdParagraph",
  },
  {
    value: "Generative AI made this paragraph.",
    label: "Generative AI made this paragraph.",
  },
  {
    value: "Generative AI inserted this paragraph.",
    label: "Generative AI inserted this paragraph.",
  },
  {
    value: "*",
    label: "*",
  },
];

type BooleanFormControlPropsType = {
  label: string;
  fieldName: string;
  fieldValue: boolean;
  updateFn: (label: string, value: boolean) => void;
  children: ReactNode;
};
const BooleanFormControl = (props: BooleanFormControlPropsType) => {
  const { label, fieldName, fieldValue, updateFn, children } = props;
  return (
    <FormControl my={5}>
      <HStack>
        <FormLabel minW={'3xs'} mb={0}>{label}</FormLabel>
        <Switch
          isChecked={fieldValue}
          onChange={(evt) => updateFn(fieldName, evt.target.checked)}
        />
      </HStack>
      <FormHelperText my={3} lineHeight={1.5}>
        {children}
      </FormHelperText>
    </FormControl>
  );
};

type TextFormControlPropsType = {
  label: string;
  fieldName: string;
  fieldValue: string;
  updateFn: (label: string, value: string) => void;
  children: ReactNode;
};
const TextFormControl = (props: TextFormControlPropsType) => {
  const { label,fieldName, fieldValue, updateFn, children } = props;
  return (
    <FormControl my={5}>
      <HStack>
        <FormLabel minW={'3xs'} mb={0}>{label}</FormLabel>
        <Box w={"lg"}>
          <Input
            value={fieldValue}
            onChange={(evt) => {
              updateFn(fieldName, evt.target.value);
            }}
          />
        </Box>
      </HStack>
      <FormHelperText my={3} lineHeight={1.5}>
        {children}
      </FormHelperText>
    </FormControl>
  );
};

type NumberFormControlPropsType = {
  label: string;
  fieldName: string;
  fieldValue: number;
  updateFn: (label: string, value: number) => void;
  children: ReactNode;
};
const NumberFormControl = (props: NumberFormControlPropsType) => {
  const { label, fieldName, fieldValue, updateFn, children } = props;
  return (
    <FormControl my={5}>
      <HStack>
        <FormLabel minW={'3xs'} mb={0}>{label}</FormLabel>
        <Box w={"lg"}>
          <NumberInput
            min={0}
            max={10_000}
            step={1}
            value={fieldValue ? Number(fieldValue) : 0}
            onChange={(val) => {
              updateFn(fieldName, parseInt(val));
            }}
          >
            <NumberInputField />
            <NumberInputStepper>
              <NumberIncrementStepper />
              <NumberDecrementStepper />
            </NumberInputStepper>
          </NumberInput>
        </Box>
      </HStack>
      <FormHelperText my={3} lineHeight={1.5}>
        {children}
      </FormHelperText>
    </FormControl>
  );
};

const Settings: FCWithAuth = () => {
  const { settings, error, isLoading, onSave } = useSettings();

  const defaultValues: SettingType = {
    contentSelector: "",
    desiredAdvertisementCount: 0,
    desiredAdvertisementSpotCount: 0,
    minCharLimit: 0,
    sameTypeElemWithTextToFollow: false,
    webpageLookbackDays: 0,
    webpageInsertCap: 1000,
    scoreThreshold: 0,
    status: false,
    sponsoredWording: "",
    mainPostBodySelector: "",
    allTimeMostVisitedUrlCount: 0,
    recentlyMostVisitedUrlCount: 0,
    makeLinksBold: false,
  };

  const [items, setItems] = useState(defaultValues);
  const updateItem = (itemName: string, itemValue: any) => {
    console.log("in updateItem with: ", itemName, itemValue);
    setItems((prevState) => ({
      ...prevState,
      [itemName]: itemValue,
    }));
  };
  const {
    scoreThreshold,
    status,
    sponsoredWording,
    mainPostBodySelector,
    contentSelector,
    minCharLimit,
    sameTypeElemWithTextToFollow,
    webpageInsertCap,
    allTimeMostVisitedUrlCount,
    recentlyMostVisitedUrlCount,
    makeLinksBold,
  } = items;

  useEffect(() => {
    if (settings) {
      console.log("got updated settings: ", settings);
      setItems(settings);
    }
  }, [settings]);

  return (
    <Box>
      <Heading my={5}>Settings Campaign</Heading>
      <VStack spacing={5}>
        {error && <ErrorAlert />}
        {isLoading && <Spinner color={"blue.500"} />}
        {settings && (
          <VStack spacing={5} mb={10}>
            <FormControl>
              <FormLabel>Score Threshold</FormLabel>
              <SliderThumbWithTooltip
                value={scoreThreshold}
                onChangeHandler={(val) => updateItem("scoreThreshold", val)}
              />
              <FormHelperText my={3} mt={5} lineHeight={1.5}>
                <Text>
                  Select the minimum score for campaign product relevancy. This
                  value is used to define the minimum score a campaign&apos;s
                  product must receive in order to be considered relevant to a
                  webpage. Only campaigns that meet or exceed this score will be
                  eligible to run on the webpage.
                </Text>
              </FormHelperText>
              <FormHelperText></FormHelperText>
            </FormControl>
            <BooleanFormControl
              label="Status"
              fieldName={"status"}
              fieldValue={status}
              updateFn={updateItem}
            >
              <Text>
                Turn On/Off BrandWeaver Script. If you turn it off, the script
                will stop working on all websites and all pages for all
                campaigns. This is a global on/off switch.
              </Text>
            </BooleanFormControl>
            <FormControl my={5}>
              <HStack>
                <FormLabel mb={0} minW={'3xs'} >Sponsored Wording:</FormLabel>
                <Box w={"lg"}>
                  <Select
                    placeholder={"Currently empty and thus not being used."}
                    size={"md"}
                    formatCreateLabel={(inputValue) =>
                      `Create Custom: ${inputValue}`
                    }
                    onChange={(selectedOption, actionMeta) => {
                      updateItem(
                        "sponsoredWording",
                        selectedOption?.value ?? ""
                      );
                    }}
                    value={
                      sponsoredWording == ""
                        ? null
                        : { label: sponsoredWording, value: sponsoredWording }
                    }
                    isClearable={true}
                    isSearchable={true}
                    isMulti={false}
                    useBasicStyles={true}
                    selectedOptionStyle={"check"}
                    options={sponsoredOptions}
                  />
                </Box>
              </HStack>
              <FormHelperText my={3} lineHeight={1.5}>
                <Text>
                  Optionally provide text you want to show after each
                  advertisement. This can be used to inform readers that the
                  text generated by brandweaver.ai was done so by using an AI
                  model and is an advertisement.
                </Text>
              </FormHelperText>
              <FormHelperText></FormHelperText>
            </FormControl>
            <TextFormControl
              label={"Main Post Body Selector"}
              fieldName={'mainPostBodySelector'}
              fieldValue={mainPostBodySelector}
              updateFn={updateItem}
            >
              <Text>
                Provide the CSS selector which identifies where the post is on
                your page. By default the AI model reads the whole body of your
                post to understand it. By providing a CSS Selector, you can tell
                the model to focus only on the content in this tag. This can be
                useful to prevent the model from reading navigation bars,
                footers & other content on the page.
              </Text>
            </TextFormControl>
            <TextFormControl
              label={"Content Selector"}
              fieldName={'contentSelector'}
              fieldValue={contentSelector}
              updateFn={updateItem}
            >
              <Text>
                Provide the CSS selector which identifies the paragraph after
                which to place the ad.
              </Text>
            </TextFormControl>
            <NumberFormControl
              label={"Min Char Limit"}
              fieldName={'minCharLimit'}
              fieldValue={minCharLimit}
              updateFn={updateItem}
            >
              <Text>
                The minimum number of characters an element must have to be
                accepted as a place after which an ad can be placed.
              </Text>
            </NumberFormControl>
            <BooleanFormControl
              label={"Same Type of element to Follow"}
              fieldName={'sameTypeElemWithTextToFollow'}
              fieldValue={sameTypeElemWithTextToFollow}
              updateFn={updateItem}
            >
              <Text>
                When turn on, it required that the element after the ad element
                is of the same type as the previous element.
              </Text>
            </BooleanFormControl>
            <NumberFormControl
              label={"Max Webpage Insert Cap"}
              fieldName={'webpageInsertCap'}
              fieldValue={webpageInsertCap}
              updateFn={updateItem}
            >
              <Text>
                The maximum number of webpages which are to be saved at one
                time.
              </Text>
            </NumberFormControl>
            <NumberFormControl
              label={"All Time Most Visited Url Count"}
              fieldName={'allTimeMostVisitedUrlCount'}
              fieldValue={allTimeMostVisitedUrlCount}
              updateFn={updateItem}
            >
              <Text>
                The maximum number of webpages to save from the top of all time
                most visited urls.
              </Text>
            </NumberFormControl>
            <NumberFormControl
              label={"Recently Most Visited Url Count"}
              fieldName={'recentlyMostVisitedUrlCount'}
              fieldValue={recentlyMostVisitedUrlCount}
              updateFn={updateItem}
            >
              <Text>
                The maximum number of webpages to save from the top of recently
                most visited urls.
              </Text>
            </NumberFormControl>
            <BooleanFormControl
              label={"Make Links Bold"}
              fieldName={'makeLinksBold'}
              fieldValue={makeLinksBold}
              updateFn={updateItem}
            >
              <Text>Makes product links in the text bold</Text>
            </BooleanFormControl>

            <FormControl my={5} textAlign={'center'}>
              <Button
                size={'lg'}
                colorScheme="blue"
                onClick={() => {
                  onSave({
                    ...items,
                  });
                }}
              >
                Save
              </Button>
            </FormControl>
          </VStack>
        )}
      </VStack>
    </Box>
  );
};

Settings.auth = true;

export default Settings;

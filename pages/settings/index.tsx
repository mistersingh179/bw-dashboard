import FCWithAuth from "@/types/FCWithAuth";
import NewCampaign from "@/pages/campaigns/new";
import {
  Box,
  Button,
  FormControl,
  FormErrorMessage,
  FormHelperText,
  FormLabel,
  Heading,
  HStack,
  Input,
  Progress,
  Spinner,
  Switch,
  Text,
  VStack,
} from "@chakra-ui/react";
import CampaignForm from "@/components/CampaignForm";
import { Link } from "@chakra-ui/next-js";
import React, { useEffect, useState } from "react";
import SliderThumbWithTooltip from "@/components/SliderThumbWithTooltip";
import useSettings from "@/hooks/useSettings";
import { ErrorAlert, ErrorRow, NoDataRow } from "@/components/genericMessages";
import { SettingType } from "@/types/my-types";
import { CreatableSelect as Select } from "chakra-react-select";

const sponsoredOptions: { value: string; label: string }[] = [
  {
    value: "This paragraph was generated by BrandWeaver.ai.",
    label: "This paragraph was generated by BrandWeaver.ai.",
  },
  {
    value: "This paragraph was generated by a large language model.",
    label: "This paragraph was generated by a large language model.",
  },
  {
    value: "This paragraph was generated by AI.",
    label: "This paragraph was generated by AI.",
  },
  {
    value: "This paragraph was AI-generated.",
    label: "This paragraph was AI-generated.",
  },
  {
    value: "This paragraph is AI-generated advertising.",
    label: "This paragraph is AI-generated advertising.",
  },
  {
    value: "This paragraph is an AI-generated ad.",
    label: "This paragraph is an AI-generated ad.",
  },
  {
    value: "This paragraph is sponsored.",
    label: "This paragraph is sponsored.",
  },
  {
    value: "#SponsoredParagraph",
    label: "#SponsoredParagraph",
  },
  {
    value: "#AdvertisingParagraph",
    label: "#AdvertisingParagraph",
  },
  {
    value: "#AdParagraph",
    label: "#AdParagraph",
  },
  {
    value: "Generative AI made this paragraph.",
    label: "Generative AI made this paragraph.",
  },
  {
    value: "Generative AI inserted this paragraph.",
    label: "Generative AI inserted this paragraph.",
  },
];

const Settings: FCWithAuth = () => {
  const { settings, error, isLoading, onSave } = useSettings();

  const defaultValues: SettingType = {
    contentSelector: "",
    desiredAdvertisementCount: 0,
    desiredAdvertisementSpotCount: 0,
    minCharLimit: 0,
    sameTypeElemWithTextToFollow: false,
    webpageLookbackDays: 0,
    scoreThreshold: 0,
    status: false,
    addSponsoredWording: false,
    sponsoredWording: "",
    mainPostBodySelector: "",
  };

  const [items, setItems] = useState(defaultValues);
  const updateItem = (itemName: string, itemValue: any) => {
    setItems((prevState) => ({
      ...prevState,
      [itemName]: itemValue,
    }));
  };
  const {
    scoreThreshold,
    status,
    addSponsoredWording,
    sponsoredWording,
    mainPostBodySelector,
  } = items;

  useEffect(() => {
    if (settings) {
      console.log("got updated settings: ", settings);
      setItems(settings);
    }
  }, [settings]);

  return (
    <Box>
      <Heading my={5}>Settings Campaign</Heading>
      <VStack spacing={5}>
        {error && <ErrorAlert />}
        {isLoading && <Spinner color={"blue.500"} />}
        {settings && (
          <Box>
            <FormControl>
              <FormLabel>Score Threshold</FormLabel>
              <SliderThumbWithTooltip
                value={scoreThreshold}
                onChangeHandler={(val) => updateItem("scoreThreshold", val)}
              />
              <FormHelperText my={3} mt={5} lineHeight={1.5}>
                <Text>
                  Select the minimum score for campaign product relevancy.
                </Text>
                <Text my={1}>
                  This value is used to define the minimum score a
                  campaign&apos;s product must receive in order to be considered
                  relevant to a webpage. Only campaigns that meet or exceed this
                  score will be eligible to run on the webpage.
                </Text>
              </FormHelperText>
              <FormHelperText></FormHelperText>
            </FormControl>
            <FormControl my={5}>
              <HStack>
                <FormLabel mb={0}>Status</FormLabel>
                <Switch
                  isChecked={status}
                  onChange={(evt) => updateItem("status", evt.target.checked)}
                />
              </HStack>
              <FormHelperText my={3} lineHeight={1.5}>
                <Text>Turn On/Off BrandWeaver Script</Text>
                <Text my={1}>
                  This toggle switch allows you to turn on or off the
                  BrandWeaver script. If you turn it off, the script will stop
                  working on all websites and all pages for all campaigns. This
                  is a global on/off switch. If you want to control the script
                  more granularly, you can pause individual campaigns, websites,
                  or pages.
                </Text>
                <Text my={1}>
                  Note: If you turn off the BrandWeaver script, it will stop
                  running on all websites and all pages, and you will need to
                  turn it back on to use it again.
                </Text>
              </FormHelperText>
              <FormHelperText></FormHelperText>
            </FormControl>
            <FormControl my={5}>
              <HStack>
                <FormLabel mb={0}>Sponsored Wording:</FormLabel>
                <Box w={"lg"}>
                  <Select
                    size={"md"}
                    formatCreateLabel={(inputValue) =>
                      `Create Custom: ${inputValue}`
                    }
                    onChange={(selectedOption, actionMeta) => {
                      updateItem(
                        "sponsoredWording",
                        selectedOption?.value ?? ""
                      );
                    }}
                    value={
                      sponsoredWording == ""
                        ? null
                        : { label: sponsoredWording, value: sponsoredWording }
                    }
                    isClearable={true}
                    isSearchable={true}
                    isMulti={false}
                    useBasicStyles={true}
                    selectedOptionStyle={"check"}
                    options={sponsoredOptions}
                  />
                </Box>
              </HStack>
              <FormHelperText my={3} lineHeight={1.5}>
                <Text>{sponsoredWording}</Text>
                <Text>
                  Optionally provide text you want to show after each
                  advertisement.
                </Text>
                <Text my={1}>
                  This can be used to inform readers that the text generated by
                  brandweaver.ai was done so by using an AI model and is an
                  advertisement.
                </Text>
                <Text my={1}>
                  When the toggle is OFF (default): Generated advertisements
                  will not have any additional wording to indicate whether they
                  are sponsored or not.
                </Text>
                <Text my={1}>
                  Note: The sponsored content toggle provides transparency and
                  helps readers distinguish between regular and sponsored
                  messages.
                </Text>
              </FormHelperText>
              <FormHelperText></FormHelperText>
            </FormControl>
            <FormControl my={5}>
              <HStack>
                <FormLabel mb={0}>Main Post Body Selector</FormLabel>
                <Box w={"lg"}>
                  <Input
                    value={mainPostBodySelector}
                    onChange={(evt) => {
                      updateItem("mainPostBodySelector", evt.target.value);
                    }}
                  />
                </Box>
              </HStack>
              <FormHelperText my={3} lineHeight={1.5}>
                <Text>
                  Provide the CSS selector which identifies where the post is on
                  your page.
                </Text>
                <Text my={1}>
                  By default the AI model reads the whole body of your post to
                  understand it. By providing a CSS Selector, you can tell the
                  model to focus only on the content in this tag.
                </Text>
                <Text my={1}>
                  This can be useful to prevent the model from reading
                  navigation bars, footers & other content on the page which is
                  not relevant to the post on the page.
                </Text>
              </FormHelperText>
              <FormHelperText></FormHelperText>
            </FormControl>
            <FormControl my={5}>
              <Button
                colorScheme="blue"
                onClick={() => {
                  onSave({
                    ...items,
                  });
                }}
              >
                Save
              </Button>
            </FormControl>
          </Box>
        )}
      </VStack>
    </Box>
  );
};

Settings.auth = true;

export default Settings;

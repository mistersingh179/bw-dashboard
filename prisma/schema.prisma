// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["extendedWhereUnique"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  directUrl         = env("DIRECT_URL")
}

generator erd {
  provider                  = "prisma-erd-generator"
  output                    = "ERD.svg"
  includeRelationFromFields = true
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String       @id @default(cuid())
  accounts      Account[]
  sessions      Session[]
  auctions      Auction[]
  campaigns     Campaign[]
  websiteUrls   WebsiteUrl[]
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
}

model Auction {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([userId, createdAt(sort: Asc)])
}

model WebsiteUrl {
  id                 String              @id @default(cuid())
  userId             String
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  relevantCampaigns  RelevantCampaign[]
  advertisementSpots AdvertisementSpot[]
  url                String
  corpus             String
  status             Boolean
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt

  @@unique([userId, url])
  @@index([userId])
  @@index([userId, url, status])
  @@index([userId, createdAt(sort: Asc)])
}

model AdvertisementSpot {
  id             String          @id @default(cuid())
  websiteUrlId   String
  websiteUrl     WebsiteUrl      @relation(fields: [websiteUrlId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  advertisements Advertisement[]
  beforeText     String
  afterText      String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@unique([websiteUrlId, beforeText, afterText])
  @@index([websiteUrlId])
}

model RelevantCampaign {
  id             String          @id @default(cuid())
  websiteUrlId   String
  websiteUrl     WebsiteUrl      @relation(fields: [websiteUrlId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  campaignId     String
  campaign       Campaign        @relation(fields: [campaignId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  advertisements Advertisement[]
  score          Int
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@unique([websiteUrlId, campaignId])
  @@index([websiteUrlId, score])
  @@index([campaignId])
  @@index([score])
}

model Advertisement {
  id                  String            @id @default(cuid())
  relevantCampaignId  String
  relevantCampaign    RelevantCampaign  @relation(fields: [relevantCampaignId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  impressions         Impression[]
  advertisementSpotId String
  advertisementSpot   AdvertisementSpot @relation(fields: [advertisementSpotId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  advertText          String
  status              Boolean
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt

  @@index([relevantCampaignId])
  @@index([relevantCampaignId, status])
  @@index([advertisementSpotId])
}

model Campaign {
  id                  String             @id @default(cuid())
  userId              String
  user                User               @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  relevantCampaigns   RelevantCampaign[]
  impressions         Impression[]
  name                String             @default("")
  start               DateTime
  end                 DateTime
  impressionCap       Int                @default(1000000)
  fixedCpm            Decimal            @default(10.00) @db.Decimal(10, 2)
  productName         String             @default("")
  productDescription  String             @default("")
  clickUrl            String             @default("")
  requiredCssSelector String             @default("")
  pacing              Boolean            @default(false)
  status              Boolean            @default(false)
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt

  @@unique([userId, name])
  @@index([createdAt(sort: Asc)])
  @@index([userId])
  @@index([userId, status, start, end, impressionCap, fixedCpm(sort: Desc)])
}

model Impression {
  id              String        @id @default(cuid())
  campaignId      String
  campaign        Campaign      @relation(fields: [campaignId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  advertisementId String
  advertisement   Advertisement @relation(fields: [advertisementId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  url             String
  userAgent       String
  ip              String        @db.Inet
  clicked         Boolean
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@index([campaignId, createdAt(sort: Asc)])
  @@index([advertisementId, createdAt(sort: Asc)])
}

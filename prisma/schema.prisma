// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["extendedWhereUnique"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  directUrl         = env("DIRECT_URL")
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "ERD.pdf"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  auctions      Auction[]
  campaigns     Campaign[]
  websiteUrls   WebsiteUrl[]
}

model Auction {
  id        String   @id @default(cuid())
  userId    String
  url       String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WebsiteUrl {
  id                String             @id @default(cuid())
  relevantCampaigns RelevantCampaign[]
  url               String
  corpus            String
  status            Boolean
  userId            String
  user              User               @relation(fields: [userId], references: [id])
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model RelevantCampaign {
  id             String          @id @default(cuid())
  websiteUrlId   String
  websiteUrl     WebsiteUrl      @relation(fields: [websiteUrlId], references: [id])
  campaignId     String
  campaign       Campaign        @relation(fields: [campaignId], references: [id])
  advertisements Advertisement[]
  score          Int
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model Advertisement {
  id                 String           @id @default(cuid())
  relevantCampaignId String
  relevantCampaign   RelevantCampaign @relation(fields: [relevantCampaignId], references: [id])
  impressions        Impression[]
  beforeText         String
  afterText          String
  advertText         String
  status             Boolean
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
}

model Campaign {
  id                  String             @id @default(cuid())
  userId              String
  user                User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  relevantCampaigns   RelevantCampaign[]
  impressions         Impression[]
  name                String             @default("")
  start               DateTime
  end                 DateTime
  impressionCap       Int                @default(1000000)
  fixedCpm            Decimal            @default(10.00) @db.Decimal(10, 2)
  brandName           String             @default("")
  brandDescription    String             @default("")
  clickUrl            String             @default("")
  requiredCssSelector String             @default("")
  pacing              Boolean            @default(false)
  status              Boolean            @default(false)
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
}

model Impression {
  id              String        @id @default(cuid())
  campaignId      String
  campaign        Campaign      @relation(fields: [campaignId], references: [id])
  advertisementId String
  advertisement   Advertisement @relation(fields: [advertisementId], references: [id])
  url             String
  userAgent       String
  ip              String        @db.Inet
  clicked         Boolean
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["extendedWhereUnique", "filteredRelationCount"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  directUrl         = env("DIRECT_URL")
}

generator erd {
  provider                  = "prisma-erd-generator"
  output                    = "ERD.svg"
  includeRelationFromFields = true
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id             String     @id @default(cuid())
  accounts       Account[]
  sessions       Session[]
  auctions       Auction[]
  campaigns      Campaign[]
  websites       Website[]
  categories     Category[]
  setting        Setting?
  name           String?
  email          String?    @unique
  emailVerified  DateTime?
  image          String?
  canManageUsers Boolean    @default(false)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @default(now()) @updatedAt
}

model Setting {
  id                                 String   @id @default(cuid())
  userId                             String   @unique
  user                               User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  scoreThreshold                     Int
  status                             Boolean
  metaContentStatus                  Boolean  @default(false)
  metaContentDisplayPercentage       Int      @default(50)
  metaContentMobileDisplayPercentage Int      @default(0)
  metaContentToolTipTheme            String   @default("")
  metaContentToolTipTextColor        String   @default("")
  sponsoredWording                   String   @default("")
  desiredAdvertisementSpotCount      Int      @default(1)
  desiredMetaContentSpotCount        Int      @default(5)
  desiredAdvertisementCount          Int      @default(1)
  webpageLookbackDays                Int      @default(0)
  webpageInsertCap                   Int      @default(1000)
  allTimeMostVisitedUrlCount         Int      @default(0)
  recentlyMostVisitedUrlCount        Int      @default(0)
  mainPostBodySelector               String   @default("body")
  contentSelector                    String   @default("body p:nth-child(3n)")
  metaContentSpotSelector            String   @default("body p")
  minCharLimit                       Int      @default(20)
  minMetaContentSpotWordLimit        Int      @default(30)
  sameTypeElemWithTextToFollow       Boolean  @default(true)
  makeLinksBold                      Boolean  @default(false)
  bestCampaignCount                  Int      @default(1)
  customStyles                       String   @default(".brandweaver-ad {}")
  createdAt                          DateTime @default(now())
  updatedAt                          DateTime @updatedAt

  @@index([userId, status])
  @@index([userId, webpageLookbackDays])
}

model Auction {
  id                     String                  @id @default(cuid())
  userId                 String?
  user                   User?                   @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  websiteId              String?
  website                Website?                @relation(fields: [websiteId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  webpageId              String?
  webpage                Webpage?                @relation(fields: [webpageId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  impressions            Impression[]
  metaContentImpressions MetaContentImpression[]
  url                    String?
  userAgent              String                  @default("")
  screenWidth            Int?
  screenHeight           Int?
  ip                     String                  @default("0.0.0.0") @db.Inet
  endUserCuid            String                  @default("")
  endUserFp              String                  @default("")
  timeSpent              Int                     @default(0)
  extra                  String?
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt

  @@index([userId])
  @@index([webpageId])
  @@index([websiteId])
  @@index([url])
  @@index([extra])
  @@index([createdAt(sort: Asc)])
  @@index([websiteId, createdAt(sort: Asc)])
}

model Website {
  id                String    @id @default(cuid())
  userId            String
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  webpages          Webpage[]
  auctions          Auction[]
  topLevelDomainUrl String
  sitemapUrl        String
  status            Boolean
  processedOn       DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@unique([userId, topLevelDomainUrl])
  @@index([userId, topLevelDomainUrl, status])
  @@index([userId, status, processedOn])
  @@index([userId])
}

model Webpage {
  id                 String              @id @default(cuid())
  websiteId          String
  website            Website             @relation(fields: [websiteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  scoredCampaigns    ScoredCampaign[]
  advertisementSpots AdvertisementSpot[]
  metaContentSpots   MetaContentSpot[]
  categories         Category[]
  auctions           Auction[]
  content            Content?
  url                String
  status             Boolean
  lastModifiedAt     DateTime            @default(now())
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt

  @@unique([websiteId, url])
  @@index([websiteId])
  @@index([websiteId, status])
  @@index([websiteId, url, status])
  @@index([websiteId, createdAt(sort: Asc)])
}

model Content {
  id          String   @id @default(cuid())
  webpageId   String   @unique
  webpage     Webpage  @relation(fields: [webpageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  desktopHtml String
  mobileHtml  String?
  tabletHtml  String?
  title       String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([webpageId])
}

model Category {
  id          String     @id @default(cuid())
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  webpages    Webpage[]
  campaigns   Campaign[]
  name        String
  abortScript Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@unique([userId, name])
  @@index([userId, abortScript])
}

model AdvertisementSpot {
  id             String          @id @default(cuid())
  webpageId      String
  webpage        Webpage         @relation(fields: [webpageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  advertisements Advertisement[]
  beforeText     String
  afterText      String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@index([webpageId])
}

model ScoredCampaign {
  id               String          @id @default(cuid())
  webpageId        String
  webpage          Webpage         @relation(fields: [webpageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  campaignId       String
  campaign         Campaign        @relation(fields: [campaignId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  advertisements   Advertisement[]
  isBest           Boolean         @default(false)
  score            Int
  reason           String
  adBuildFailCount Int             @default(0)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt

  @@unique([webpageId, campaignId])
  @@index([webpageId, score])
  @@index([campaignId, score])
  @@index([score(sort: Desc)])
}

model Advertisement {
  id                  String            @id @default(cuid())
  scoredCampaignId    String
  scoredCampaign      ScoredCampaign    @relation(fields: [scoredCampaignId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  impressions         Impression[]
  advertisementSpotId String
  advertisementSpot   AdvertisementSpot @relation(fields: [advertisementSpotId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  advertText          String
  status              Boolean
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt

  @@index([scoredCampaignId])
  @@index([advertisementSpotId, scoredCampaignId, status])
  @@index([advertisementSpotId])
}

model MetaContentSpot {
  id             String        @id @default(cuid())
  webpageId      String
  webpage        Webpage       @relation(fields: [webpageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  metaContents   MetaContent[]
  contentText    String
  buildFailCount Int           @default(0)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@index([webpageId])
}

model MetaContent {
  id                        String                  @id @default(cuid())
  metaContentSpotId         String
  metaContentSpot           MetaContentSpot         @relation(fields: [metaContentSpotId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  metaContentTypeId         String
  metaContentType           MetaContentType         @relation(fields: [metaContentTypeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  metaContentImpressions    MetaContentImpression[]
  generatedText             String
  generatedHeading          String
  diveristyClassifierResult String
  diveristyClassifierReason String
  status                    Boolean
  createdAt                 DateTime                @default(now())
  updatedAt                 DateTime                @updatedAt

  @@index([status])
  @@index([metaContentSpotId])
  @@index([metaContentTypeId])
  @@index([diveristyClassifierResult])
}

model MetaContentType {
  id           String        @id @default(cuid())
  name         String
  metaContents MetaContent[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@unique([name])
}

model MetaContentImpression {
  id            String       @id @default(cuid())
  metaContentId String?
  metaContent   MetaContent? @relation(fields: [metaContentId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  auctionId     String
  auction       Auction      @relation(fields: [auctionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  feedbackEmoji String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@index([metaContentId, createdAt(sort: Asc)])
  @@index([auctionId, createdAt(sort: Asc)])
}

model Campaign {
  id                 String           @id @default(cuid())
  userId             String
  user               User             @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  scoredCampaigns    ScoredCampaign[]
  categories         Category[]
  name               String           @default("")
  start              DateTime
  end                DateTime
  impressionCap      Int              @default(1000000)
  fixedCpm           Decimal          @default(10.00) @db.Decimal(10, 2)
  productName        String           @default("")
  productDescription String           @default("")
  clickUrl           String           @default("")
  creativeUrl        String?
  pacing             Boolean          @default(false)
  status             Boolean          @default(false)
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt

  @@unique([userId, name])
  @@index([createdAt(sort: Asc)])
  @@index([userId])
  @@index([id, start, end, status, fixedCpm(sort: Desc)])
}

model Impression {
  id              String         @id @default(cuid())
  advertisementId String?
  advertisement   Advertisement? @relation(fields: [advertisementId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  auctionId       String
  auction         Auction        @relation(fields: [auctionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  clicked         Boolean
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@index([advertisementId, createdAt(sort: Asc)])
  @@index([auctionId, createdAt(sort: Asc)])
}

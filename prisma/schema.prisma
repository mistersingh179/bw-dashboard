// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["extendedWhereUnique", "filteredRelationCount"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  directUrl         = env("DIRECT_URL")
}

generator erd {
  provider                  = "prisma-erd-generator"
  output                    = "ERD.svg"
  includeRelationFromFields = true
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String     @id @default(cuid())
  accounts      Account[]
  sessions      Session[]
  auctions      Auction[]
  campaigns     Campaign[]
  websites      Website[]
  categories    Category[]
  setting       Setting?
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @default(now()) @updatedAt
}

model Setting {
  id                  String   @id @default(cuid())
  userId              String   @unique
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  scoreThreshold      Int
  status              Boolean
  addSponsoredWording Boolean  @default(false)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model Auction {
  id          String       @id @default(cuid())
  userId      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  webpageId   String?
  webpage     Webpage?     @relation(fields: [webpageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  impressions Impression[]
  url         String?
  userAgent   String       @default("")
  ip          String       @default("0.0.0.0") @db.Inet
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([userId])
  @@index([userId, webpageId, createdAt(sort: Asc)])
  @@index([userId, createdAt(sort: Asc)])
}

model Website {
  id                String    @id @default(cuid())
  userId            String
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  webpages          Webpage[]
  topLevelDomainUrl String
  sitemapUrl        String
  status            Boolean
  processedOn       DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@unique([userId, topLevelDomainUrl])
  @@index([userId, topLevelDomainUrl, status])
  @@index([userId, status, processedOn])
  @@index([userId])
}

model Webpage {
  id                 String              @id @default(cuid())
  websiteId          String
  website            Website             @relation(fields: [websiteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  scoredCampaigns    ScoredCampaign[]
  advertisementSpots AdvertisementSpot[]
  categories         Category[]
  auctions           Auction[]
  content            Content?
  url                String
  status             Boolean
  lastModifiedAt     DateTime            @default(now())
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt

  @@unique([websiteId, url])
  @@index([websiteId])
  @@index([websiteId, status])
  @@index([websiteId, url, status])
  @@index([websiteId, createdAt(sort: Asc)])
}

model Content {
  id          String   @id @default(cuid())
  webpageId   String   @unique
  webpage     Webpage  @relation(fields: [webpageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  desktopHtml String
  mobileHtml  String?
  tabletHtml  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Category {
  id        String     @id @default(cuid())
  userId    String
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  webpages  Webpage[]
  campaigns Campaign[]
  name      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@unique([userId, name])
  @@index([userId])
}

model AdvertisementSpot {
  id             String          @id @default(cuid())
  webpageId      String
  webpage        Webpage         @relation(fields: [webpageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  advertisements Advertisement[]
  beforeText     String
  afterText      String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@unique([webpageId, beforeText, afterText])
  @@index([webpageId])
}

model ScoredCampaign {
  id             String          @id @default(cuid())
  webpageId      String
  webpage        Webpage         @relation(fields: [webpageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  campaignId     String
  campaign       Campaign        @relation(fields: [campaignId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  advertisements Advertisement[]
  score          Int
  reason         String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@unique([webpageId, campaignId])
  @@index([webpageId, score])
  @@index([campaignId])
  @@index([score])
}

model Advertisement {
  id                  String            @id @default(cuid())
  scoredCampaignId    String
  scoredCampaign      ScoredCampaign    @relation(fields: [scoredCampaignId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  impressions         Impression[]
  advertisementSpotId String
  advertisementSpot   AdvertisementSpot @relation(fields: [advertisementSpotId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  advertText          String
  status              Boolean
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt

  @@index([scoredCampaignId])
  @@index([scoredCampaignId, status])
  @@index([advertisementSpotId])
}

model Campaign {
  id                  String           @id @default(cuid())
  userId              String
  user                User             @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  scoredCampaigns     ScoredCampaign[]
  categories          Category[]
  name                String           @default("")
  start               DateTime
  end                 DateTime
  impressionCap       Int              @default(1000000)
  fixedCpm            Decimal          @default(10.00) @db.Decimal(10, 2)
  productName         String           @default("")
  productDescription  String           @default("")
  clickUrl            String           @default("")
  requiredCssSelector String           @default("")
  pacing              Boolean          @default(false)
  status              Boolean          @default(false)
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt

  @@unique([userId, name])
  @@index([createdAt(sort: Asc)])
  @@index([userId])
  @@index([userId, status, start, end, impressionCap, fixedCpm(sort: Desc)])
}

model Impression {
  id              String        @id @default(cuid())
  advertisementId String
  advertisement   Advertisement @relation(fields: [advertisementId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  auctionId       String?
  auction         Auction?      @relation(fields: [auctionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userAgent       String
  ip              String        @db.Inet
  clicked         Boolean
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@index([advertisementId, createdAt(sort: Asc)])
  @@index([auctionId, createdAt(sort: Asc)])
}
